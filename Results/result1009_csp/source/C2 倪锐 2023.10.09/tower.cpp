#include<bits/stdc++.h>#define re register// #define int long long#define rep(i,a,b) for(int i(a);i<=(b);++i)#define req(i,a,b) for(int i(a);i>=(b);--i)using namespace std;char buf[1<<23],*p1=buf,*p2=buf,ubuf[1<<23],*u=ubuf;#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)template<typename TP> inline TP read(TP &num){	re TP x=0;re int f=0;re char ch=getchar();	while(ch<48||ch>57) f|=ch=='-',ch=getchar();	while(48<=ch&&ch<=57) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();	return num=f?-x:x;}template<typename TP> inline void write(TP x){	(x<0)?(putchar('-'),x=-x):0;    (x>9)?(write(x/10),0):0;	putchar((x%10)^48);}template<typename TP> inline void writeln(TP x){	write<TP>(x);	puts("");}vector<pair<int,int>> g[50001];int n,k,b[50001],a[51][51];vector<int> co[50001];#define F(x) (x.first)#define S(x) (x.second)namespace ShortestPath{	int dis[50001];	bitset<50001> vis;	inline int Dijkstra(int from,int to)	{		vis.reset();		memset(dis,63,sizeof dis);		priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;		dis[from]=0;		q.emplace(0,from);		while(!q.empty())		{			int x=q.top().second;q.pop();			if(vis.test(x)) continue;			vis.set(x);			for(pair<int,int> i:g[x]) if(dis[F(i)]>dis[x]+S(i)) dis[F(i)]=dis[x]+S(i),q.emplace(dis[F(i)],F(i));		}		return dis[to];	}}signed main(){	freopen("tower.in","r",stdin);	freopen("tower.out","w",stdout);	read(n);read(k);	rep(i,1,n) read(b[i]),co[b[i]].emplace_back(i);	rep(i,1,k) rep(j,1,k)	{		while((a[i][j]=int(getchar())-48)!=0&&a[i][j]!=1);		if(a[i][j]) for(re int I:co[i]) for(re int J:co[j]) g[I].emplace_back(J,abs(I-J));	}	int ans=ShortestPath::Dijkstra(1,n);	write(ans);	return 0; }